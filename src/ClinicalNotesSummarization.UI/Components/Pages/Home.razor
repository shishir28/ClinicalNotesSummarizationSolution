@page "/"
@rendermode InteractiveServer
@inject ClinicalNotesSummarization.UI.Services.IPatientService PatientService
@inject NavigationManager Nav

<MudPopoverProvider />
<PageTitle>Clinical Notes Summarizer</PageTitle>

<div style="flex:1;">
    <div style="margin-bottom:18px;">
        <input @bind="searchQuery" placeholder="Search medications or diagnoses or medical conditions or medications or allergies or clinical content..."
            style="width:70%;padding:8px;border-radius:4px;border:1px solid #ccc;" />
        <MudButton OnClick="@(async () => await RunSearch(searchQuery))" style="margin-left:8px;padding:8px
                    12px;border-radius:4px;background:#2563eb;color:white;border:none;">Search</MudButton>
    </div>

    <div style="margin-bottom:16px;">

        @if (patients != null && patients.Any())
        {
            <h3>Search results</h3>

            <MudTable Items="patients" Hover="true" SortLabel="Sort By" Elevation="0" AllowUnsorted="false">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Gender</MudTh>
                    <MudTh>DOB</MudTh>
                    <MudTh>PhoneNumber</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Address</MudTh>
                    <MudTh>Score</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.FullName</MudTd>
                    <MudTd>@context.Gender</MudTd>
                    <MudTd>@context.DobDisplay</MudTd>
                    <MudTd>@context.Phone</MudTd>
                    <MudTd>@context.Email</MudTd>
                    <MudTd>@context.Address</MudTd>
                    <MudTd>@context.Score</MudTd>
                    <MudTd>
                        <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Pageview"
                            OnClick="@(() => NavigateToPatient(context.Id))">View </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </div>
</div>


@code {
    private string searchQuery = string.Empty;
    private object? searchResults;
    private bool isSearching = false;

    private List<DisplayPatient> patients = new();

    private async Task RunSearch(string searchQuery)
    {
        if (string.IsNullOrWhiteSpace(searchQuery)) return;
        isSearching = true;
        try
        {
            searchResults = await PatientService.SearchPatientsAsync(searchQuery);

            // attempt to extract distinct patients
            patients = new List<DisplayPatient>();
            try
            {
                var json = System.Text.Json.JsonSerializer.Serialize(searchResults);
                var opts = new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                var raw = System.Text.Json.JsonSerializer.Deserialize<List<RawSearchResult>>(json, opts);
                if (raw != null)
                {
                    patients = raw
                    .Where(r => r.Patient != null && r.Score > 0.5) // filter out null patients and negative scores
                    .Select(r => new DisplayPatient
                    {
                        Id = TryParseGuid(r.Patient.Id),
                        FirstName = r.Patient.FirstName ?? string.Empty,
                        LastName = r.Patient.LastName ?? string.Empty,
                        Dob = TryParseDate(r.Patient.Dob),
                        Gender = r.Patient.Gender ?? string.Empty,
                        Phone = r.Patient.Phone ?? string.Empty,
                        Email = r.Patient.Email ?? string.Empty,
                        Address = r.Patient.Address ?? string.Empty,
                        Score = r.Score
                    })
                    .GroupBy(p => p.Id)
                    .Select(g => g.OrderByDescending(x => x.Score).First())
                    .ToList();
                }
            }
            catch (Exception ex)
            {
                // if parsing fails, keep patients empty and show raw results elsewhere
            }
        }
        finally
        {
            isSearching = false;
        }
    }

    private void NavigateToPatient(Guid patientId)
    {

        if (patientId == null || patientId == Guid.Empty)
            return;

        Nav.NavigateTo($"/patient/{patientId}");
    }
    private static Guid TryParseGuid(string? id)
    {
        if (Guid.TryParse(id, out var g)) return g;
        return Guid.Empty;
    }

    private static DateTime? TryParseDate(string? s)
    {
        if (DateTime.TryParse(s, out var dt)) return dt;
        return null;
    }

    private class RawSearchResult
    {
        public string? PatientId { get; set; }
        public double Score { get; set; }
        public RawPatient? Patient { get; set; }
    }

    private class RawPatient
    {
        public string? Id { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Dob { get; set; }
        public string? Gender { get; set; }
        public string? Phone { get; set; }
        public string? Email { get; set; }
        public string? Address { get; set; }
    }

    private class DisplayPatient
    {
        public Guid Id { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public DateTime? Dob { get; set; }
        public string Gender { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Address { get; set; } = string.Empty;
        public double Score { get; set; }

        public string FullName => $"{FirstName} {LastName}".Trim();
        public string DobDisplay => Dob.HasValue ? Dob.Value.ToString("yyyy-MM-dd") : string.Empty;
    }
}