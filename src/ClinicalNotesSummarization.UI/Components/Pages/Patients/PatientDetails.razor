@page "/patient/{id}"
@using ClinicalNotesSummarization.UI.Components.Pages.Allergies
@using ClinicalNotesSummarization.UI.Components.Pages.Diagnoses
@using ClinicalNotesSummarization.UI.Components.Pages.MedicalConditions
@using ClinicalNotesSummarization.UI.Components.Pages.Medications
@using ClinicalNotesSummarization.UI.Models
@using ClinicalNotesSummarization.UI.Services
@rendermode InteractiveServer
@inject NavigationManager Nav
@inject IPatientService PatientService

<h2 class="text-2xl font-bold">Patient Details</h2>
@if (patient != null)
{
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudPaper Class="pa-4 mt-4">
                <MudForm ReadOnly="true" Spacing="2">
                    <MudTextField @bind-Value="@patient.FirstName" Label="First Name" ReadOnly="readOnly" />
                    <MudTextField @bind-Value="@patient.LastName" Label="Last Name" ReadOnly="readOnly" />
                    <MudTextField @bind-Value="@patient.Gender" Label="Gender" ReadOnly="readOnly" />
                    <MudTextField @bind-Value="@patient.DateOfBirth" Label="DOB" ReadOnly="readOnly" />
                    <MudTextField @bind-Value="@patient.Email" Label="Email" ReadOnly="readOnly" />
                    <MudTextField @bind-Value="@patient.PhoneNumber" Label="Phone Number" ReadOnly="readOnly" />
                    <MudTextField @bind-Value="@patient.Address" Label="Address" ReadOnly="readOnly" />
                </MudForm>
            </MudPaper>
            <MudPaper Class="pa-4 mt-4">
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => Nav.NavigateTo($"/patients"))">
                    Back To Patients</MudButton>
            </MudPaper>
            <MudPaper Class="pa-4 mt-4">
                <MudTabs Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6"
                    @bind-ActivePanelIndex="activeIndex">
                    <MudTabPanel Text="Medications">
                        <Medication PatientId="@Id" />
                    </MudTabPanel>
                    <MudTabPanel Text="Medical Condition">
                        <MedicalCondition PatientId="@Id" />
                    </MudTabPanel>
                    <MudTabPanel Text="Diagnosis">
                        <Diagnosis PatientId="@Id" />
                    </MudTabPanel>
                    <MudTabPanel Text="Allergy">
                        <Allergy PatientId="@Id" />
                    </MudTabPanel>
                </MudTabs>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6">
            <!-- Floating chat button that opens the drawer -->
            <MudIconButton Icon="@Icons.Material.Filled.Chat" Color="Color.Primary" OnClick="ToggleDrawer"
                Style="position: absolute; top: 16px; right: 16px; z-index: 1200;" />

            <MudDrawer Anchor="MudBlazor.Anchor.End" Open="@_drawerOpen" Elevation="4" Variant="DrawerVariant.Temporary"
                Width="400px" Class="pa-4">
                <MudDrawerHeader>
                    <MudText Typo="Typo.h6">Chat</MudText>
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="ToggleDrawer" />
                </MudDrawerHeader>

                @if (patient != null)
                {
                    <div class="d-flex flex-column" style="gap:12px;">
                        <ChatWindow TMessage="ChatMessage" Title="General Chat" CurrentPatient="patient"
                            OnSend="@HandleGeneralSend" />
                    </div>
                }
            </MudDrawer>
        </MudItem>
    </MudGrid>
}
else
{
    <p>Loading patient data...</p>
}

@code {
    private int activeIndex = 0;

    private PatientDto? patient;

    [Parameter] public string Id { get; set; }
    private bool showForm = false;
    private bool readOnly = true;

    List<ChatMessage> GeneralMessages { get; set; } = new();
    List<ChatMessage> SummaryMessages { get; set; } = new();

    // Drawer state
    private bool _drawerOpen = false;
    private void ToggleDrawer() => _drawerOpen = !_drawerOpen;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Nav.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var tabIndex = queryParams["tab"];
        if (!string.IsNullOrEmpty(tabIndex) && int.TryParse(tabIndex, out int index))
            activeIndex = index;

        await LoadPatientData();
    }

    private async Task LoadPatientData() =>
    patient = await PatientService.GetPatientById(Guid.Parse(Id));

    private Task HandleGeneralSend(string text)
    {
        @* GeneralMessages.Add(new ChatMessage { Text = text, FromAgent = false }); *@
        return Task.CompletedTask;
    }

    private Task HandleSummarySend(string text)
    {
        // allow user to chat with the summarization agent (could forward to backend QA endpoint)

        return Task.CompletedTask;
    }

}